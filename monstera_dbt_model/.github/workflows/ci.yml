name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Testing

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/dev-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r dev-requirements.txt

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

      - name: Run Python tests
        run: |
          pytest tests/ -v --tb=short --cov=scripts --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  dbt-test:
    runs-on: ubuntu-latest
    name: DBT Testing

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: monstera_demo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up database credentials
        run: |
          mkdir -p ~/.dbt
          echo "monstera_dbt_model:" > ~/.dbt/profiles.yml
          echo "  target: dev" >> ~/.dbt/profiles.yml
          echo "  outputs:" >> ~/.dbt/profiles.yml
          echo "    dev:" >> ~/.dbt/profiles.yml
          echo "      type: postgres" >> ~/.dbt/profiles.yml
          echo "      host: localhost" >> ~/.dbt/profiles.yml
          echo "      user: postgres" >> ~/.dbt/profiles.yml
          echo "      password: postgres" >> ~/.dbt/profiles.yml
          echo "      port: 5432" >> ~/.dbt/profiles.yml
          echo "      dbname: monstera_demo" >> ~/.dbt/profiles.yml
          echo "      schema: bronze" >> ~/.dbt/profiles.yml
          echo "      threads: 4" >> ~/.dbt/profiles.yml
          echo "      keepalives_idle: 0" >> ~/.dbt/profiles.yml

      - name: Create database schemas
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d monstera_demo -c "CREATE SCHEMA IF NOT EXISTS bronze;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d monstera_demo -c "CREATE SCHEMA IF NOT EXISTS silver;"
          PGPASSWORD=postgres psql -h localhost -U postgres -d monstera_demo -c "CREATE SCHEMA IF NOT EXISTS gold;"        - name: Setup sample data
          run: |
            export DB_HOST=localhost
            export DB_USER=postgres
            export DB_PASSWORD=postgres
            export DB_NAME=monstera_demo
            export DB_PORT=5432
            python scripts/setup_sample_data.py

      - name: Install dbt packages
        run: dbt deps

      - name: Run dbt models
        run: |
          dbt run --models bronze
          dbt run --models silver
          dbt run --models gold

      - name: Run dbt tests
        run: dbt test

  deployment:
    runs-on: ubuntu-latest
    name: Deployment
    needs: [code-quality, dbt-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "Deployment steps would go here"
          echo "This could include:"
          echo "- Building Docker images"
          echo "- Deploying to cloud infrastructure"
          echo "- Running production data pipeline"
          echo "- Updating documentation"
